[project]
name = "hbit"
version = "0.1.0"
description = """
HBIT is project trying to analyze and aggregate security information about mobile devices.
It consist of scrapers that gather data from various sources and a web API that provides
access to the data. The last part is simple CLI app that serve as a prototype for langchain
based application using data from API to provide security information to user based on his
user's question.
"""
readme = "README.md"
requires-python = ">=3.12"

dependencies = [
    # LangChain Dependencies
    "langchain>=0.3.9",
    "langgraph>=0.2.60",
    "langchain-groq>=0.2.1",
    "langchain-openai>=0.2.11",
    "langchain-community>=0.3.9",
    "langchain-anthropic>=0.3.4",
    "langchain-deepseek-official>=0.1.0",
    "langchain-google-genai>=2.0.9",
    "langchain-mistralai>=0.2.6",
    "langchain-together>=0.3.0",
    "langchain-nvidia-ai-endpoints>=0.3.8",
    # AI Utils
    "typer[all]>=0.12.5",
    "streamlit>=1.41.1",
    "watchdog>=6.0.0",
    "termcolor>=2.5.0",
    # API Dependencies
    "fastapi[standard]>=0.115.6",
    "pydantic>=2.10.3",
    "alembic>=1.14.0",
    "email-validator>=2.2.0",
    "emails>=0.6",
    "gunicorn>=23.0.0",
    "httpx>=0.28.0",
    "jinja2>=3.1.4",
    "pydantic-settings>=2.6.1",
    "python-jose[cryptography]>=3.3.0",
    "sentry-sdk[fastapi]>=2.19.1",
    "sqlalchemy>=2.0.36",
    "sqlmodel>=0.0.22",
    "svcs>=24.1.0",
    "tenacity>=9.0.0",
    "uvicorn[standard]>=0.32.1",
    "psycopg[binary]>=3.2.3",
    "argon2-cffi>=23.1.0",
    "url-normalize>=1.4.3",
    "stamina>=24.3.0",
    "authlib>=1.3.2",
    "polars>=1.26.0",
    "langdetect>=1.0.9",
    "pymilvus[model]>=2.4.9",
]

[tool.uv]
dev-dependencies = [
    "ggshield>=1.36.0",
    "ipykernel>=6.29.5",
    "marimo>=0.12.0",
    "pytest>=8.3.3",
    "ruff>=0.7.1",
]

#########################################
# Linting and Formatting Configurations #
#########################################

[tool.ruff]
# Exclude a variety of commonly ignored directories.
extend-include = ["*.ipynb"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Ruff rules 
# https://docs.astral.sh/ruff/rules/
select = [
    # Defaults
    "E", # pycodestyle
    "F", # Pyflakes
    # Custom rules
    "W",    # pycodestyle warnings
    "C",    # McCabe complexity
    "B",    # flake8-bugbear
    "I",    # isort
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "RUF",  # Ruff-specific rules
    "NPY",
    "FURB",
    "PERF",
    "ERA",
    # These rules can be helpful and should be activated at some point 
    # "ANN", # flake8-annotations
    # "TRY",
    # "PL",
]
ignore = ["E501", "B904"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

#########################
# Typing Configurations #
#########################

[tool.pyright]
exclude = ["**/__pycache__", ".venv", "**/alembic"]

typeCheckingMode = "strict"

# Setting explicitly defined from Pyright Configuration
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md

# reportMissingTypeStubs = "none"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
# reportUnknownVariableType = "none"
reportCallInDefaultInitializer = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportShadowedImports = "warning"
reportPropertyTypeMismatch = "warning"
reportPrivateImportUsage = "none"
# reportConstantRedefinition = "none"

[tool.marimo.runtime]
pythonpath = ["."]
dotenv = [".env", ".env.testing"]
